# sleigh specification file for HP NMOS-II
#
# Copyright (c) 2023 by Klaus KÃ¤mpf <kkaempf@gmail.com>
#
# Licensed under the Apache 2.0 license
#


#--------------------------------------------------------------------------
# Spaces

define endian=big;
define alignment=1;
define space ram      type=ram_space      size=2  wordsize=1 default;
define space register type=register_space size=2;


#--------------------------------------------------------------------------
# Registers
                                   #0 2 4 6 8  a  c  e  10 12 14 16    18    1a   1c 1e 20  22 24
define register offset=0x0 size=2 [ A B P R R4 R5 R6 R7 IV PA W  DMAPA DMAMA DMAC C  D  AR2 SE X ];

define register offset=0x30 size=2  [ loc ];


# condition flags
define register offset=0x50 size=1   [ DC_F HLT_F FLG_F STS_F ];


#--------------------------------------------------------------------------
# Macros


#--------------------------------------------------------------------------
# Tokens


#--------------------------------------------------------------------------
# Variables


#--------------------------------------------------------------------------
# Tables


#--------------------------------------------------------------------------
# Mnemonics

# -- memory reference

define token memory_reference(16)
  di = (15,15)   # direct / indirect
  op_mem = (11,14)  # instruction
  page = (10,10) # base / current page
  addr = (0,9)   # address
;

memref: addr is addr { export *[const]:2 addr; }

:LDA memref is op_mem=0 & memref { }
:LDB memref is op_mem=1 & memref { }
:CPA memref is op_mem=2 & memref { }
:CPB memref is op_mem=3 & memref { }
:ADA memref is op_mem=4 & memref { }
:ADB memref is op_mem=5 & memref { }
:STA memref is op_mem=6 & memref { }
:STB memref is op_mem=7 & memref { }
:JSM memref is op_mem=8 & memref { }
:ISZ memref is op_mem=9 & memref { }
:AND memref is op_mem=10 & memref { }
:DSZ memref is op_mem=11 & memref { }
:IOR memref is op_mem=12 & memref { }
:JMP memref is op_mem=13 & memref { }

# -- shift / rotate

define token shift_rotate(16)
  op1215 = (12,15)  # opcode1
  op911 = (9,11)
  op68 = (6,8)
  op45 = (4,5)
  count = (0,3)
;

shift: count is count { export *[const]:1 count; }

:AAR shift is op1215=0xf & op911=0 & op68 = 4 & op45 = 0 & shift { }
:ABR shift is op1215=0xf & op911=4 & op68 = 4 & op45 = 0 & shift { }
:SAR shift is op1215=0xf & op911=0 & op68 = 5 & op45 = 0 & shift { }
:SBR shift is op1215=0xf & op911=4 & op68 = 5 & op45 = 0 & shift { }
:SAL shift is op1215=0xf & op911=0 & op68 = 6 & op45 = 0 & shift { }
:SBL shift is op1215=0xf & op911=4 & op68 = 6 & op45 = 0 & shift { }
:RAR shift is op1215=0xf & op911=0 & op68 = 7 & op45 = 0 & shift { }
:RBR shift is op1215=0xf & op911=4 & op68 = 7 & op45 = 0 & shift { }

# -- skip

#:RZA
#:RZB
#:SZA
#:SZB
#:RIA
#:RIB
#:SIA
#:SIB
#:SPS
#:SFC
#:SSS
#:SSC
#:SDS
#:SDC
#:SHS
#:SHC

# -- return

# -- complement

# -- alter

# -- execute

# -- 16-bit IOC only

# -- stack

# -- interrupt

# -- dma

# -- four word operation

# -- mantissa shift

# -- arithmetic
