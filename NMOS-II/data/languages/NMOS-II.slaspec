# sleigh specification file for HP NMOS-II
#
# Copyright (c) 2023 by Klaus KÃ¤mpf <kkaempf@gmail.com>
#
# Licensed under the Apache 2.0 license
#


#--------------------------------------------------------------------------
# Spaces

define endian=big;
define alignment=2;
define space ram      type=ram_space      size=2  wordsize=2 default;
define space register type=register_space size=2;

#--------------------------------------------------------------------------
# Registers
                                   #0 2 4 6 8  a  c  e  10 12 14 16    18    1a   1c 1e 20  22 24
define register offset=0x0 size=2 [ A B P R R4 R5 R6 R7 IV PA W  DMAPA DMAMA DMAC C  D  AR2 SE X R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31];

define register offset=0x40 size=2  [ loc ];


# condition flags
define register offset=0x50 size=1   [ DC_F HLT_F FLG_F STS_F OV_F ];

#--------------------------------------------------------------------------
# Macros

macro goto_if_not_zero(value, starget) {
  if (value == 0) goto <continue>;
  goto [starget];
<continue>
}

macro goto_if_zero(value, starget) {
  if (value != 0) goto <continue>;
  goto [starget];
<continue>
}

macro compare_and_goto_if_not_equal(register, memory) {
  if (register == memory) goto <continue>;
  local tmp:2 = inst_next + 1;
  goto [tmp];
<continue>
}

macro arith_shift_right(value, count) {
  local high = value & 0x8000;
  value = value >> count;
  if (high == 0) goto <continue>;
  local tmp:2 = ~0 << (16 - count);
  value = value | tmp;
<continue>
}

macro rotate_right(value) {
  local lowbit = value & 1;
  value = value >> 1;
  value = value | (lowbit << 15);
}

#--------------------------------------------------------------------------
# Mnemonics

# -- memory reference

define token memory_reference(16)
  opcode = (0,15)
  di = (15,15)   # direct / indirect
  op_mem = (11,14)  # instruction
  page = (10,10) # base / current page
  addr = (0,9) signed  # address
;

# base page, direct
memref: addr     is addr & page=0 & di=0                              { export *[ram]:2 addr; }
# base page, indirect
memref: loc^",I" is addr & page=0 & di=1 [ loc = 0 + addr; ]          { ptr:2 = *loc:2; export *[ram]:2 ptr; }
# current page, direct
memref: loc      is addr & page=1 & di=0 [ loc = inst_start + addr; ] { export *[ram]:2 loc; }
# current page, indirect
memref: loc^",I" is addr & page=1 & di=1 [ loc = inst_start + addr; ] { ptr:2 = *loc:2; export *[ram]:2 ptr; }

:LDA memref is op_mem=0 & memref { A = memref; }
:LDB memref is op_mem=1 & memref { B = memref; }
:CPA memref is op_mem=2 & memref { compare_and_goto_if_not_equal(A, memref); }
:CPB memref is op_mem=3 & memref { compare_and_goto_if_not_equal(B, memref); }
:ADA memref is op_mem=4 & memref { A = A + memref; }
:ADB memref is op_mem=5 & memref { B = B + memref; }
:STA memref is op_mem=6 & memref { *memref = A; }
:STB memref is op_mem=7 & memref { *memref = B; }
:JSM memref is op_mem=8 & memref { R = R + 1; *R:2 = P; call [memref]; }
:ISZ memref is op_mem=9 & memref { local tmp:2 = memref + 1; *memref:2 = tmp; goto_if_zero(tmp, (inst_start>>1) + 2:2); }
:AND memref is op_mem=10 & memref { A = A & memref; }
:DSZ memref is op_mem=11 & memref { local tmp:2 = memref - 1; *memref:2 = tmp; goto_if_zero(tmp, (inst_start>>2) + 2:2); }
:IOR memref is op_mem=12 & memref { A = A | memref; }
:JMP memref is op_mem=13 & memref { goto [memref]; }

# -- shift / rotate

define token shift_rotate(16)
  op1215 = (12,15)  # opcode1
  op911 = (9,11)
  op68 = (6,8)
  op45 = (4,5)
  count = (0,3)
  skip = (0,5) signed
;

shift: count is count { export *[const]:1 count; }

:AAR shift is op1215=0xf & op911=0 & op68 = 4 & op45 = 0 & shift { arith_shift_right(A, shift); }
:ABR shift is op1215=0xf & op911=4 & op68 = 4 & op45 = 0 & shift { arith_shift_right(B, shift); }
:SAR shift is op1215=0xf & op911=0 & op68 = 5 & op45 = 0 & shift { A = A >> shift; }
:SBR shift is op1215=0xf & op911=4 & op68 = 5 & op45 = 0 & shift { B = B >> shift; }
:SAL shift is op1215=0xf & op911=0 & op68 = 6 & op45 = 0 & shift { A = A << shift; }
:SBL shift is op1215=0xf & op911=4 & op68 = 6 & op45 = 0 & shift { B = B << shift; }
:RAR shift is op1215=0xf & op911=0 & op68 = 7 & op45 = 0 & shift { rotate_right(A); }
:RBR shift is op1215=0xf & op911=4 & op68 = 7 & op45 = 0 & shift { rotate_right(B); }

# -- skip

# skip target
starget: skip is skip { local tmp:2 = (inst_start>>1) + skip; export tmp; }

:RZA starget is op1215=7 & op911=2 & op68=0 & starget { goto_if_not_zero(A, starget); }
:RZB starget is op1215=7 & op911=6 & op68=0 & starget { goto_if_not_zero(B, starget); }
:SZA starget is op1215=7 & op911=2 & op68=4 & starget { goto_if_zero(A, starget); }
:SZB starget is op1215=7 & op911=6 & op68=4 & starget { goto_if_zero(B, starget); }
:RIA starget is op1215=7 & op911=2 & op68=1 & starget { local tmp:2 = A; A = A + 1; goto_if_not_zero(tmp, starget); }
:RIB starget is op1215=7 & op911=6 & op68=1 & starget { local tmp:2 = B; B = B + 1; goto_if_not_zero(tmp, starget); }
:SIA starget is op1215=7 & op911=2 & op68=5 & starget { local tmp:2 = A; A = A + 1; goto_if_zero(tmp, starget); }
:SIB starget is op1215=7 & op911=6 & op68=5 & starget { local tmp:2 = B; B = B + 1; goto_if_zero(tmp, starget); }
:SFS starget is op1215=7 & op911=2 & op68=2 & starget { goto_if_not_zero(FLG_F, starget); }
:SFC starget is op1215=7 & op911=2 & op68=6 & starget { goto_if_zero(FLG_F, starget); }
:SSS starget is op1215=7 & op911=6 & op68=2 & starget { goto_if_not_zero(STS_F, starget); }
:SSC starget is op1215=7 & op911=6 & op68=6 & starget { goto_if_zero(STS_F, starget); }
:SDS starget is op1215=7 & op911=2 & op68=3 & starget { goto_if_not_zero(DC_F, starget); }
:SDC starget is op1215=7 & op911=2 & op68=7 & starget { goto_if_zero(DC_F, starget); }
:SHS starget is op1215=7 & op911=6 & op68=3 & starget { goto_if_not_zero(HLT_F, starget); }
:SHC starget is op1215=7 & op911=6 & op68=7 & starget { goto_if_zero(HLT_F, starget); }

# -- return

# return target
rtarget: skip is skip { local tmp:2 = R + skip; export tmp; }

:RET rtarget is op1215=0xf & op911=0 & op68=2 & rtarget { R = R - 1; goto [rtarget]; }
:RET rtarget^",P" is op1215=0xf & op911=0 & op68=3 & rtarget { R = R - 1; goto [rtarget]; }

# -- complement

:CMA is opcode=0xf060 { A = ~A; }
:CMB is opcode=0xf860 { B = ~B; }
:TCA is opcode=0xf020 { A = -A; }
:TCB is opcode=0xf820 { B = -B; }

# -- alter

define token alter_op(16)
  op815 = (8,15)
  hold = (7,7)
  clear_set = (6,6)
  alter_skip = (0,5)
;

# alter target
atarget: alter_skip is alter_skip { local tmp:2 = (inst_start>>1) + alter_skip; export tmp; }

hcs: "" is hold = 0 & clear_set = 0 { local tmp:1 = 0; export tmp; }
hcs: "ERR" is hold = 0 & clear_set = 1 { local tmp:1 = 1; export tmp; }
hcs: ",C" is hold = 1 & clear_set = 0 { local tmp:1 = 2; export tmp; }
hcs: ",S/" is hold = 1 & clear_set = 1 { local tmp:1 = 3; export tmp; }

# skip if (val & mask)^xor != 0
macro alter_and_skip(val,mask,xor,cs,target) {
  local bit:2 = (zext(val) & mask) ^ xor;
  if (cs == 0) goto <check>;
  if (cs == 1) goto <check>;
  if (cs == 3) goto <hold_and_set>;
  # cs == 2 -> clear
  val = val & ~mask;
  goto <check>;
<hold_and_set>
  val = val | mask;
<check>
  if (bit == 0) goto <continue>; # no skip
  goto [target];
<continue>
}

# skip if non-zero
:RLA atarget^hcs is op815=0x77 & atarget & hcs { alter_and_skip(A,0x0001,0x0000,hcs,atarget); }
:RLB atarget^hcs is op815=0x7f & atarget & hcs { alter_and_skip(B,0x0001,0x0000,hcs,atarget); }
# skip if zero
:SLA atarget^hcs is op815=0x76 & atarget & hcs { alter_and_skip(A,0x0001,0x0001,hcs,atarget); }
:SLB atarget^hcs is op815=0x7e & atarget & hcs { alter_and_skip(B,0x0001,0x0001,hcs,atarget); }
# skip if positive
:SAP atarget^hcs is op815=0xf4 & atarget & hcs { alter_and_skip(A,0x8000,0x8000,hcs,atarget); }
:SBP atarget^hcs is op815=0xfc & atarget & hcs { alter_and_skip(B,0x8000,0x8000,hcs,atarget); }
# skip if negative
:SAM atarget^hcs is op815=0xf5 & atarget & hcs { alter_and_skip(A,0x8000,0x0000,hcs,atarget); }
:SBM atarget^hcs is op815=0xfd & atarget & hcs { alter_and_skip(B,0x8000,0x0000,hcs,atarget); }
# skip if overflow
:SOC atarget^hcs is op815=0xf6 & atarget & hcs { alter_and_skip(OV_F,1,0,hcs,atarget); }
:SOS atarget^hcs is op815=0xf7 & atarget & hcs { alter_and_skip(OV_F,1,1,hcs,atarget); }
# skip if extend
:SEC atarget^hcs is op815=0xfe & atarget & hcs { alter_and_skip(SE,0xf,0,hcs,atarget); }
:SES atarget^hcs is op815=0xff & atarget & hcs { alter_and_skip(SE,0xf,0xf,hcs,atarget); }

# -- execute

define token execute(16)
  exe_d_i = (15,15)
  exe_opcode = (5,14)
  regaddr = (0,4)
;

                             # 0 1 2 3 4  5  6  7  8  9  10 11    12    13   14 15 16  17 18 19  20  21  22  23  24  25  26  27  28  29  30  31
attach variables [ regaddr ] [ A B P R R4 R5 R6 R7 IV PA W  DMAPA DMAMA DMAC C  D  AR2 SE X  R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31];

# execute register content
:EXE_D regaddr is exe_d_i=0 & exe_opcode=0x380 & regaddr unimpl
:EXE_I regaddr is exe_d_i=1 & exe_opcode=0x380 & regaddr unimpl

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# IOC only
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

# set DMA direction inwards/outwards
:SDO is opcode=0x7100 unimpl
:SDI is opcode=0x7108 unimpl
:DBL is opcode=0x7140 unimpl
:CBL is opcode=0x7148 unimpl
:DBU is opcode=0x7150 unimpl
:CBU is opcode=0x7158 unimpl

# -- stack

define token stack(16)
  stack_opcode = (8,15)
  stack_d_i = (7,7)
  stack_opcode2 = (3,6)
  stack_register = (0,2)
;

:PWC_inc stack_register is stack_opcode=0x71 & stack_d_i=0 & stack_opcode2=0xc & stack_register unimpl
:PWC_dec stack_register is stack_opcode=0x71 & stack_d_i=1 & stack_opcode2=0xc & stack_register unimpl
:PBC_inc stack_register is stack_opcode=0x79 & stack_d_i=0 & stack_opcode2=0xc & stack_register unimpl
:PBC_dec stack_register is stack_opcode=0x79 & stack_d_i=1 & stack_opcode2=0xc & stack_register unimpl
:PWD_inc stack_register is stack_opcode=0x71 & stack_d_i=0 & stack_opcode2=0xd & stack_register unimpl
:PWD_dec stack_register is stack_opcode=0x71 & stack_d_i=1 & stack_opcode2=0xd & stack_register unimpl
:PBD_inc stack_register is stack_opcode=0x79 & stack_d_i=0 & stack_opcode2=0xd & stack_register unimpl
:PBD_dec stack_register is stack_opcode=0x79 & stack_d_i=1 & stack_opcode2=0xd & stack_register unimpl
:WWC_inc stack_register is stack_opcode=0x71 & stack_d_i=0 & stack_opcode2=0xe & stack_register unimpl
:WWC_dec stack_register is stack_opcode=0x71 & stack_d_i=1 & stack_opcode2=0xe & stack_register unimpl
:WBC_inc stack_register is stack_opcode=0x79 & stack_d_i=0 & stack_opcode2=0xe & stack_register unimpl
:WBC_dec stack_register is stack_opcode=0x79 & stack_d_i=1 & stack_opcode2=0xe & stack_register unimpl
:WWD_inc stack_register is stack_opcode=0x71 & stack_d_i=0 & stack_opcode2=0xf & stack_register unimpl
:WWD_dec stack_register is stack_opcode=0x71 & stack_d_i=1 & stack_opcode2=0xf & stack_register unimpl
:WBD_inc stack_register is stack_opcode=0x79 & stack_d_i=0 & stack_opcode2=0xf & stack_register unimpl
:WBD_dec stack_register is stack_opcode=0x79 & stack_d_i=1 & stack_opcode2=0xf & stack_register unimpl

# -- interrupt

:EIR is opcode=0xf110 unimpl
:DIR is opcode=0xf118 unimpl

# -- dma

:DMA is opcode=0x7120 unimpl
:PCM is opcode=0x7128 unimpl
:DDR is opcode=0x7138 unimpl

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# EMC only
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

# -- four word operation

define token four_word(16)
  fw_opcode = (4,15)
  fw_words = (0,3)
;

# four words count
fwc: fw_words is fw_words { export *[const]:1 fw_words; }

# clear N+1 words at A
:CLR fwc is fw_opcode=0x738 & fwc {
  local cnt = fwc;
  local ptr = A;
<clear_next>
  *[ram]:2 ptr = 0;
  if (cnt == 0) goto <clear_exit>;
  ptr = ptr + 1;
  cnt = cnt - 1;
  goto <clear_next>;
<clear_exit>
}
# copy N+1 words from A to B
:XFR fwc is fw_opcode=0x730 & fwc {
  local fptr = A; # from pointer
  local tptr = B; # to pointer
  local cnt = fwc;
<copy_next>
  *[ram]:2 tptr = *[ram]:2 fptr;
  if (cnt == 0) goto <copy_exit>;
  fptr = fptr + 1;
  tptr = tptr + 1;
  cnt = cnt - 1;
  goto <copy_next>;
<copy_exit>
}

# -- mantissa shift

:MRX is opcode=0x7b00 unimpl
:DRS is opcode=0x7b21 unimpl
:MLY is opcode=0x7b61 unimpl
:MRY is opcode=0x7b40 unimpl
:NRM is opcode=0x7340 unimpl

# -- arithmetic

:FXA is opcode=0x7280 unimpl
:MWA is opcode=0x7200 unimpl
:CMX is opcode=0x72c0 unimpl
:CMY is opcode=0x7240 unimpl
:FMP is opcode=0x7a00 unimpl
:FDV is opcode=0x7a21 unimpl
:MPY is opcode=0x7b8f unimpl
:CDC is opcode=0x73c0 unimpl
